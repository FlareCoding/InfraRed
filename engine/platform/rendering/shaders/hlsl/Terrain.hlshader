#shader vertex
struct VS_INPUT
{
	float3 Position : POSITION;
	float2 UV : UV;
    float3 Normal : NORMAL;
};

struct VS_OUTPUT
{
	float3 Position : POSITION;
	float2 UV : UV;
    float3 Normal : NORMAL;
    float TessAmount : TESSAMOUNT;
};

cbuffer VSBuffer : register(b0)
{
    float4x4 WorldTransform;
	float3 u_CameraPosition;
};

static const float LODLevel0 = 30.0f;
static const float LODLevel1 = 20.0f;
static const float LODLevel2 = 10.0f;
static const float LODLevel3 = 3.0f;
static const float LODLevel4 = 1.0f;

static const float LOD0ThresholdDistance = 10.0f;
static const float LOD1ThresholdDistance = 20.0f;
static const float LOD2ThresholdDistance = 30.0f;
static const float LOD3ThresholdDistance = 50.0f;

float distance2(float3 a, float3 b)
{
    return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z);
}

VS_OUTPUT main(VS_INPUT input)
{
	VS_OUTPUT output;

	output.Position = input.Position;
	output.UV		= input.UV;
	output.Normal	= input.Normal;

    float4 WorldPosition = mul(WorldTransform, float4(input.Position, 1.0));
    float range = distance(u_CameraPosition, WorldPosition.xyz);

    if (range <= LOD0ThresholdDistance * LOD0ThresholdDistance)
        output.TessAmount = LODLevel0;
    else if (range <= LOD1ThresholdDistance * LOD1ThresholdDistance)
        output.TessAmount = LODLevel1;
    else if (range <= LOD2ThresholdDistance * LOD2ThresholdDistance)
        output.TessAmount = LODLevel2;
    else if (range <= LOD3ThresholdDistance * LOD3ThresholdDistance)
        output.TessAmount = LODLevel3;
    else
        output.TessAmount = LODLevel4;

	return output;
}

#shader hull
struct HS_INPUT
{
	float3 Position : POSITION;
	float2 UV : UV;
    float3 Normal : NORMAL;
    float TessAmount : TESSAMOUNT;
};

struct ConstantFnOutputType
{
    float Edges[3]	: SV_TessFactor;
    float Inside	: SV_InsideTessFactor;
};

struct HS_OUTPUT
{
	float3 Position : POSITION;
	float2 UV : UV;
    float3 Normal : NORMAL;
};

ConstantFnOutputType PatchConstantFunction(InputPatch<HS_INPUT, 3> inputPatch, uint PatchId : SV_PrimitiveID)
{    
    ConstantFnOutputType output;

    output.Edges[0] = inputPatch[0].TessAmount;
    output.Edges[1] = inputPatch[0].TessAmount;
    output.Edges[2] = inputPatch[0].TessAmount;

    // Set the tessellation factor for tessallating inside the triangle.
    output.Inside = inputPatch[0].TessAmount;

    return output;
}

[domain("tri")]
[partitioning("integer")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(3)]
[patchconstantfunc("PatchConstantFunction")]

HS_OUTPUT main(InputPatch<HS_INPUT, 3> Patch, uint PointId : SV_OutputControlPointID, uint PatchId : SV_PrimitiveID)
{
    HS_OUTPUT output;

    output.Position = Patch[PointId].Position;
    output.UV       = Patch[PointId].UV;
    output.Normal   = Patch[PointId].Normal;

    return output;
}

#shader domain
cbuffer DSBuffer : register(b1)
{
	float4x4    Transform;
	float4x4    Projection;
	float4x4    View;
    float3      u_CameraPosition;
    float       u_Padding00;
    float3      u_LightPosition;
    float       u_Padding01;
    float3      u_BrushCenter;
    float       u_BrushRadius;
};

struct ConstantFnOutputType
{
    float Edges[3]  : SV_TessFactor;
    float Inside    : SV_InsideTessFactor;
};

struct DS_INPUT
{
	float3 Position : POSITION;
	float2 UV : UV;
    float3 Normal : NORMAL;
};

struct DS_OUTPUT
{
    float4 Position      : SV_POSITION;
    float2 UV            : UV;
    float3 Normal        : NORMAL;
    float3 ToLightVector : COLOR2;
    float4 BrushColor    : COLOR3; 
};

Texture2D DisplacementTexture : TEXTURE: register(t0);
SamplerState DisplacementTextureSampler : SAMPLER: register(s0);

static const float HeightScale = 140.0f;

float3 GetSurfaceNormal(float2 UV, float SurfaceHeight)
{
    float2 v1UV = UV;
    float2 v2UV = UV;
    float2 v3UV = UV;
    float2 v4UV = UV;

    float uv_offset = 0.01f;

    v1UV.y -= uv_offset;
    v2UV.y += uv_offset;
    v3UV.x -= uv_offset;
    v4UV.x += uv_offset;

    float v1Height = HeightScale * DisplacementTexture.SampleLevel(DisplacementTextureSampler, v1UV, 0).r;
    float v2Height = HeightScale * DisplacementTexture.SampleLevel(DisplacementTextureSampler, v2UV, 0).r;
    float v3Height = HeightScale * DisplacementTexture.SampleLevel(DisplacementTextureSampler, v3UV, 0).r;
    float v4Height = HeightScale * DisplacementTexture.SampleLevel(DisplacementTextureSampler, v4UV, 0).r;

    v1Height -= SurfaceHeight;
    v2Height -= SurfaceHeight;
    v3Height -= SurfaceHeight;
    v4Height -= SurfaceHeight;

    float3 va = float3(0, 1, v2Height);
    float3 vb = float3(1, 0, v4Height);
    float3 vc = float3(0, -1, v3Height);
    float3 vd = float3(-1, 0, v1Height);

    float3 average_n = ( cross(va, vb) + cross(vb, vc) + cross(vc, vd) + cross(vd, va) ) / -4;

    //return normalize(average_n);

    return float3(0, 1, 0);
}

[domain("tri")]
DS_OUTPUT main(ConstantFnOutputType input, float3 uvwCoord : SV_DomainLocation, const OutputPatch<DS_INPUT, 3> patch)
{
    DS_OUTPUT output;
 
    // Determine the position of the new vertex.
    float3 VertexPosition   = uvwCoord.x * patch[0].Position + uvwCoord.y * patch[1].Position + uvwCoord.z * patch[2].Position;
    float2 VertexUV         = uvwCoord.x * patch[0].UV + uvwCoord.y * patch[1].UV + uvwCoord.z * patch[2].UV;
    float3 VertexNormal     = uvwCoord.x * patch[0].Normal + uvwCoord.y * patch[1].Normal + uvwCoord.z * patch[2].Normal;
    VertexNormal            = normalize(VertexNormal);

    float4 WorldPosition        = mul(Transform, float4(VertexPosition, 1.0));

    float height = HeightScale * DisplacementTexture.SampleLevel(DisplacementTextureSampler, VertexUV, 0).r;
    WorldPosition.xyz += 10.0f * (height) * VertexNormal;

	float4 ModelViewPosition    = mul(View, WorldPosition);
	float4 FinalPosition        = mul(Projection, ModelViewPosition);

    output.Position = FinalPosition;
    output.UV = VertexUV;
    output.Normal = mul(Transform, GetSurfaceNormal(VertexUV, height));

    output.ToLightVector = u_LightPosition - WorldPosition.xyz;
   
    if (distance(u_BrushCenter.xz, WorldPosition.xz) < u_BrushRadius)
        output.BrushColor = float4(0, 0.2f, 1.0f, 1.0f);
    else
        output.BrushColor = float4(0, 0, 0, 1.0f);

    return output;
}

#shader pixel
cbuffer PSBuffer : register(b2)
{
	float u_UVTilingPrimary;
	float u_UVTilingSupport1;
	float u_UVTilingSupport2;
	float u_UVTilingSupport3;
    float4 u_LightColor;
};

Texture2D PrimaryTexture : TEXTURE: register(t0);
SamplerState PrimaryTextureSampler : SAMPLER: register(s0);

Texture2D SupportTexture1 : TEXTURE: register(t1);
SamplerState SupportTextureSampler1 : SAMPLER: register(s1);

Texture2D SupportTexture2 : TEXTURE: register(t2);
SamplerState SupportTextureSampler2 : SAMPLER: register(s2);

Texture2D SupportTexture3 : TEXTURE: register(t3);
SamplerState SupportTextureSampler3 : SAMPLER: register(s3);

Texture2D BlendmapTexture : TEXTURE: register(t4);
SamplerState BlendmapTextureSampler : SAMPLER: register(s4);

struct PS_INPUT
{
	float4 Position : SV_POSITION;
	float2 UV : UV;
    float3 Normal : NORMAL;
    float3 ToLightVector : COLOR2;
    float4 BrushColor : COLOR3; 
};

float4 CalculateDiffuseComponent(float3 UnitNormal, float3 ToLightVector)
{
	float3 UnitLightVector = normalize(ToLightVector);

	float NdotL = dot(UnitNormal, UnitLightVector);
	float Brightness = max(NdotL, 0.2);
	float3 Diffuse = Brightness * u_LightColor;

    return float4(Diffuse, 1.0f);
}

float4 CalculateTextureColor(float2 UVs)
{
    float4 BlendmapColor = BlendmapTexture.Sample(BlendmapTextureSampler, UVs);

    float PrimaryTextureAmount = 1 - (BlendmapColor.r + BlendmapColor.g + BlendmapColor.b);
	float2 TiledUVsPrimary = UVs * u_UVTilingPrimary;
	float2 TiledUVsSupport1 = UVs * u_UVTilingSupport1;
	float2 TiledUVsSupport2 = UVs * u_UVTilingSupport2;
	float2 TiledUVsSupport3 = UVs * u_UVTilingSupport3;
	
	float4 PrimaryTextureColor = PrimaryTexture.Sample(PrimaryTextureSampler, TiledUVsPrimary) * PrimaryTextureAmount;
	float4 SupportTexture1Color = SupportTexture1.Sample(SupportTextureSampler1, TiledUVsSupport1) * BlendmapColor.r;
    float4 SupportTexture2Color = SupportTexture2.Sample(SupportTextureSampler2, TiledUVsSupport2) * BlendmapColor.g;
    float4 SupportTexture3Color = SupportTexture3.Sample(SupportTextureSampler3, TiledUVsSupport3) * BlendmapColor.b;

	return PrimaryTextureColor + SupportTexture1Color + SupportTexture2Color + SupportTexture3Color;
}

float4 main(PS_INPUT input) : SV_TARGET
{
	float4 TextureColor = CalculateTextureColor(input.UV);
    float4 DiffuseColor = CalculateDiffuseComponent(input.Normal, input.ToLightVector);

    float4 FinalColor = DiffuseColor * TextureColor + input.BrushColor;

    return FinalColor;
}
